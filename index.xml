<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Eating...Hungry..</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Eating...Hungry..</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 20 May 2021 16:25:20 +0800</lastBuildDate><atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-10-xi-ma-la-ya/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-10-xi-ma-la-ya/</guid>
      <description>自我介绍 基本情况 服务端渲染 和客户端对比优缺点 怎么判断客户端渲染到服务端渲染的优化提速多少，看什么指标 qps多少？高并发怎么办？ 了解服务端渲染</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-11-elem/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-11-elem/</guid>
      <description>自我介绍 项目介绍 点击跳转请求为什么会丢失 gpu渲染机制 自动化埋点 直播介绍 jsdk的实现了解吗 事件机制 事件循环 react、vue和原生对比 re</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-12-hong-shu/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-12-hong-shu/</guid>
      <description>自我介绍 css三栏布局 单行文本、多行文本溢出通用方案 说了line-climp 那可能有浏览器兼容的限制 又说了js 那不用js 纯css解决呢 画一个</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-13-ha-luo/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-13-ha-luo/</guid>
      <description>自我介绍 position定位 relative定位怎么相对自己的 flex布局 a宽度800px，display flex; b flex: 1 2 200px，c flex: 3 4 40</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-14-sou-gou/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-14-sou-gou/</guid>
      <description>一面 自我介绍 http2.0 和http1.0对比 事件循环 误差尽量小的定时器，间隔1s context是否可以代替redux吗 怎么避免子组件不必要的渲染 写一个</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-15-wang-yi/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-15-wang-yi/</guid>
      <description>一面 自我介绍 水平垂直居中 align-items是水平还是竖直方向 自适应布局 css动画 left和translate平移有什么区别 基本数据类型 s</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-16-bai-du/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-16-bai-du/</guid>
      <description>一面 自我介绍 切换主题 h5兼容性问题 1px是因为什么 怎么解决 除了放大缩小 移动端怎么调试 如果出现了线上某一机型有问题，怎么调试 图片不知道宽高怎么</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-2-ban-yu/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-2-ban-yu/</guid>
      <description>一面 说一说ES6的新特性吧 map, object的key都是字符串吗 promise promise为了解决什么问题 promise原理了解过吗 浏览器缓存机制 etag last-modified 的作</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-3-lan-hu/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-3-lan-hu/</guid>
      <description>自我介绍 问了项目 做编程题 请编写function arrToObj(arr) {}, 将 1 2 3 4 5 6 7 8 const arr = [ { node: &amp;#34;a&amp;#34;, children: [&amp;#34;b&amp;#34;, &amp;#34;c&amp;#34;] }, { node: &amp;#34;d&amp;#34;, children: [&amp;#34;a&amp;#34;] }, { node: &amp;#34;b&amp;#34;, children: [&amp;#34;e&amp;#34;, &amp;#34;i&amp;#34;] }, { node: &amp;#34;c&amp;#34;, children: [&amp;#34;f&amp;#34;] }, { node: &amp;#34;f&amp;#34;, children: [&amp;#34;g&amp;#34;] },</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-6-soul/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-6-soul/</guid>
      <description>自我介绍 css flex布局 position js new的原理 箭头函数 promise promise.all失败了一个会怎么样 map了解过吗 和object的区别 reflect了解</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-7-hao-wei-lai/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-7-hao-wei-lai/</guid>
      <description>自我介绍 浏览器缓存 etag和last-modified谁的优先级高，etag有啥缺点 强缓存协商缓存的应用 跨域在平时开发怎么解决的 说了代理 nginx （</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-8-yuan-fu-dao/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-8-yuan-fu-dao/</guid>
      <description>自我介绍 介绍项目 ts 联合类型和交叉类型 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 interface A { foo: string; boo: number; } interface B { foo: string; car: number; } A &amp;amp; B =? A|B = ? interface B { foo: number; car:</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-9-bei-ke/</link>
      <pubDate>Thu, 20 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-9-bei-ke/</guid>
      <description>一面 自我介绍 做题，两个部分都三选二 Part 1 二维数组中的查找 在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增</description>
    </item>
    
    <item>
      <title>html</title>
      <link>http://localhost:1313/interview/html/</link>
      <pubDate>Tue, 04 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/html/</guid>
      <description>html语义化 语义化是指根据内容的结构化（内容语义化），选择合适的标签（代码语义化），便于开发者阅读和写出更优雅的代码的同时，让浏览器的爬虫</description>
    </item>
    
    <item>
      <title>http</title>
      <link>http://localhost:1313/interview/http/</link>
      <pubDate>Tue, 04 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/http/</guid>
      <description>TCP/IP 协议 计算机之间的通信要遵循不同的协议，来实现互相之间的通信。 应用层：DNS 协议、HTTP、FTP、WebSocket 等。 传输层：TCP、U</description>
    </item>
    
    <item>
      <title>js基础</title>
      <link>http://localhost:1313/interview/js/</link>
      <pubDate>Tue, 04 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/js/</guid>
      <description>this 继承</description>
    </item>
    
    <item>
      <title>node</title>
      <link>http://localhost:1313/interview/node/</link>
      <pubDate>Tue, 04 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/node/</guid>
      <description>进程和线程 进程 是资源分配和调度的基本单位，是操作系统的基础，是线程的容器。比如打开浏览器是一个进程，再打开记事本就是开了两个进程。 进程守护：</description>
    </item>
    
    <item>
      <title>ts</title>
      <link>http://localhost:1313/interview/ts/</link>
      <pubDate>Tue, 04 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/ts/</guid>
      <description>typescript中interface 和type的区别 Answer: 1 2 3 4 5 interface SetPoint { (x: number, y: number): void; } type SetPoint = (x: number, y: number) =&amp;gt; void; 1 2 3 4 5 6 7 8 //number type MyNumber = number; //dom let div = document.createElement(&amp;#39;div&amp;#39;);</description>
    </item>
    
    <item>
      <title>优化</title>
      <link>http://localhost:1313/interview/better/</link>
      <pubDate>Tue, 04 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/better/</guid>
      <description></description>
    </item>
    
    <item>
      <title>其他技术</title>
      <link>http://localhost:1313/interview/other/</link>
      <pubDate>Tue, 04 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/other/</guid>
      <description>iScroll 是什么 iScroll 是一种高性能，占用空间小，无依赖的多平台 javascript 滚动器。体验堪比原生滚动。 为什么需要 针对性能和尺寸进行了优化，实现在现代和旧设备上最平滑</description>
    </item>
    
    <item>
      <title>算法</title>
      <link>http://localhost:1313/interview/algorithm/</link>
      <pubDate>Tue, 04 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/algorithm/</guid>
      <description>排序 快排 平均时间复杂度是O(nlogn)，最差时间复杂度是O(n²）。 核心思想是选定一个基准值x，将比x小的值放到左边，比x大的值放到右边。</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>http://localhost:1313/interview/design-mode/</link>
      <pubDate>Tue, 04 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/design-mode/</guid>
      <description>发布订阅 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 class Listen { ctor() { this.handlers = {}; } on() { const [key, handle] = Array.from(arguments); if (key in this.handlers) { this.handlers[key] = [...this.handlers[key], handle]; } else { this.handlers[key] = [handle]; } } emit() { const [key, ...param] = Array.from(arguments); const handlerArr =</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-1-bai-ci-zhan/</link>
      <pubDate>Sat, 01 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-1-bai-ci-zhan/</guid>
      <description>Q1：typescript中interface 和type的区别 Answer: 1 2 3 4 5 interface SetPoint { (x: number, y: number): void; } type SetPoint = (x: number, y: number) =&amp;gt; void; 1 2 3 4 5 6 7 8 //number type MyNumber = number; //dom let</description>
    </item>
    
    <item>
      <title></title>
      <link>http://localhost:1313/interview/e-5-tu-zhan/</link>
      <pubDate>Sat, 01 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/e-5-tu-zhan/</guid>
      <description>自我介绍 tcp udp区别 443端口是那个协议？80是哪个协议？ 说说js事件循环吧 哪些是宏任务，哪些是微任务 提到了js单线程 为什么js是单线程 学的</description>
    </item>
    
    <item>
      <title>es6</title>
      <link>http://localhost:1313/interview/es6/</link>
      <pubDate>Sat, 01 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/es6/</guid>
      <description>箭头函数 this指向创建外部的上下文，this是静态的 不能修改指向 不能用做构造函数，与new使用会报错 没有argument,可以用rest 不</description>
    </item>
    
    <item>
      <title>experience</title>
      <link>http://localhost:1313/interview/experience/</link>
      <pubDate>Sat, 01 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/experience/</guid>
      <description>超有爱 ban-yu lan-hu tu-zhan soul hao-wei-lai fu-dao bei-ke 10 11 12 13 14 15 16</description>
    </item>
    
    <item>
      <title>webpack</title>
      <link>http://localhost:1313/interview/webpack/</link>
      <pubDate>Sat, 01 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/webpack/</guid>
      <description>entry 概念 入口起点(entry point) 指示 webpack 应该使用哪个模块来作为构建其内部依赖图(dependency graph)的开始。进入入口起点后，webpa</description>
    </item>
    
    <item>
      <title>手写代码</title>
      <link>http://localhost:1313/interview/write/</link>
      <pubDate>Sat, 01 May 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/write/</guid>
      <description>promise Promise就是为了解决回调地狱的问题而产生的。 特点 Promise 本质是一个状态机，每个 Promise 有三种状态：pending、fulfilled 以及reje</description>
    </item>
    
    <item>
      <title>css</title>
      <link>http://localhost:1313/interview/css/</link>
      <pubDate>Tue, 20 Apr 2021 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/interview/css/</guid>
      <description>1.BFC 概念: BFC 即 Block Formatting Contexts (块级格式化上下文)，就像一个封闭的箱子，不会影响外部的样式，并且具有一些普通容器所没有的特性。 触发方式: html根元素 f</description>
    </item>
    
    <item>
      <title>移动端适配</title>
      <link>http://localhost:1313/daily/2020-03-05-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</link>
      <pubDate>Thu, 05 Mar 2020 10:47:01 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2020-03-05-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/</guid>
      <description>相关单位概念 px: 根据屏幕分辨率而言的，是绝对长度单位，它不会根据屏幕的大小进行调整。 设备像素比：DPR = 设备分辨率/设备屏幕宽度；window</description>
    </item>
    
    <item>
      <title>createElement and render</title>
      <link>http://localhost:1313/daily/2020-02-01-/</link>
      <pubDate>Sat, 01 Feb 2020 10:47:01 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2020-02-01-/</guid>
      <description>一旦使用上次所写的rendering 整个dom树便在递归之前不能停止。如果元素树比较庞大，再有一些高级响应的操作，变会卡顿</description>
    </item>
    
    <item>
      <title>音视频</title>
      <link>http://localhost:1313/daily/2021-04-23/</link>
      <pubDate>Sat, 01 Feb 2020 10:47:01 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2021-04-23/</guid>
      <description>直播相关音视频理论 一个完整的直播链路： 采集 —&amp;gt; 编码 —&amp;gt; 封装 —&amp;gt; 推流 —&amp;gt; 服务器 客户端 —&amp;gt; 拉流 —&amp;gt; 解码 —&amp;g</description>
    </item>
    
    <item>
      <title>createElement and render</title>
      <link>http://localhost:1313/daily/2020-01-31-createelement-render/</link>
      <pubDate>Fri, 31 Jan 2020 10:47:01 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2020-01-31-createelement-render/</guid>
      <description>1 2 3 4 5 6 7 8 9 10 const element = &amp;lt;h1 title=&amp;#34;foo&amp;#34;&amp;gt;Hello&amp;lt;/h1&amp;gt; const container = document.getElementById(&amp;#34;root&amp;#34;) ReactDOM.render(element, container) // 替换 const element = &amp;lt;h1 title=&amp;#34;foo&amp;#34;&amp;gt;Hello&amp;lt;/h1&amp;gt; const element = React.createElement( &amp;#34;h1&amp;#34;, { title: &amp;#34;foo&amp;#34; }, &amp;#34;Hello&amp;#34; ) 由此定义转换成如下格式 1 2 3 4 5 6 7 const element = { type: &amp;#34;h1&amp;#34;, props: { title: &amp;#34;foo&amp;#34;, children: &amp;#34;Hello&amp;#34;,</description>
    </item>
    
    <item>
      <title>TypeScript 中使用 mobx</title>
      <link>http://localhost:1313/daily/2020-01-04-mobx%E9%9A%8F%E7%AC%94/</link>
      <pubDate>Sat, 04 Jan 2020 10:47:01 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2020-01-04-mobx%E9%9A%8F%E7%AC%94/</guid>
      <description>为了更好的学习mobx，自己搭建了一个可以使用mobx的环境，小试牛刀。 当然还可以直接用codebox</description>
    </item>
    
    <item>
      <title>mobx简介</title>
      <link>http://localhost:1313/daily/2020-01-03-mobx%E9%9A%8F%E7%AC%94/</link>
      <pubDate>Fri, 03 Jan 2020 10:46:33 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2020-01-03-mobx%E9%9A%8F%E7%AC%94/</guid>
      <description>介绍 mobx和redux类似，是响应式编程，实现状态的存储和管理。 主要是三步： 定义可观察的状态 创建试图来响应状态的变化 更改对应的状态 Observable 第一步</description>
    </item>
    
    <item>
      <title>antv/f2(下)</title>
      <link>http://localhost:1313/daily/2019-12-28-antv-f2%E4%B8%8B/</link>
      <pubDate>Sat, 28 Dec 2019 11:39:23 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-28-antv-f2%E4%B8%8B/</guid>
      <description>业务中涉及到了层叠折线图和层叠柱状图，其实主要全面的看了文档，就能知道哪些可以自定义实现，主要涉及的配置如下。 具体配置 当我们需要改变纵轴的显</description>
    </item>
    
    <item>
      <title>antv/f2(中)</title>
      <link>http://localhost:1313/daily/2019-12-27-antv-f2%E4%B8%AD/</link>
      <pubDate>Fri, 27 Dec 2019 11:39:23 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-27-antv-f2%E4%B8%AD/</guid>
      <description>html中创建antv f2图表 既可以通过将脚本下载到本地也可以直接引入在线资源。 1 2 3 &amp;lt;!-- 引入在线资源 --&amp;gt; &amp;lt;script src=&amp;#34;https://gw.alipayobjects.com/os/antv/assets/f2/3.4.2/f2.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!-- 友情提醒：请按需更新版本号。 --&amp;gt; 1</description>
    </item>
    
    <item>
      <title>antv/f2(上)</title>
      <link>http://localhost:1313/daily/2019-12-25-antv-f2%E4%B8%8A/</link>
      <pubDate>Wed, 25 Dec 2019 11:39:23 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-25-antv-f2%E4%B8%8A/</guid>
      <description>Antv Antv是蚂蚁金服全新一代数据可视化解决方案。 官网传送口 主要有以下产品 我们可以看到f2是一个专注于移动，开箱即用的可视化解决方案，完美支持</description>
    </item>
    
    <item>
      <title>React小记</title>
      <link>http://localhost:1313/daily/2019-12-22-%E9%9A%8F%E7%AC%94/</link>
      <pubDate>Sun, 22 Dec 2019 11:39:23 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-22-%E9%9A%8F%E7%AC%94/</guid>
      <description>冬至快乐！吃饺子了吗？我和某亭象征性的吃了汤圆！ React.FC&amp;lt;&amp;gt; React.FC是标识函数式组件的 1 2 3 4 5 6 7 8 9 10 11 12 interface IProps { title: string; } const testFunc = (props: IProps) =&amp;gt; { // 此时</description>
    </item>
    
    <item>
      <title>九宫格抽奖</title>
      <link>http://localhost:1313/daily/2019-12-21-%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%8A%BD%E5%A5%96/</link>
      <pubDate>Sat, 21 Dec 2019 11:39:23 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-21-%E4%B9%9D%E5%AE%AB%E6%A0%BC%E6%8A%BD%E5%A5%96/</guid>
      <description>九宫格抽奖 整理一下写过的九宫格抽奖吧。 一般抽奖的奖品数据都是从后端返回的。所以九宫格的话，奖品个数是8个。 这个时候奖品数据返回的顺序其实就需</description>
    </item>
    
    <item>
      <title>切换主题色</title>
      <link>http://localhost:1313/daily/2019-12-20-%E5%88%87%E6%8D%A2%E4%B8%BB%E9%A2%98%E8%89%B2/</link>
      <pubDate>Fri, 20 Dec 2019 11:38:34 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-20-%E5%88%87%E6%8D%A2%E4%B8%BB%E9%A2%98%E8%89%B2/</guid>
      <description>css in js 以前我们经常会说网页开发离不开Html, Css, JavaScript。对于网页开发，一般会对这三种技术分离。简单来说就是少写行内样式，行内脚</description>
    </item>
    
    <item>
      <title>useReduer（下）</title>
      <link>http://localhost:1313/daily/2019-12-17-usereduer%E4%B8%8B/</link>
      <pubDate>Tue, 17 Dec 2019 21:22:09 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-17-usereduer%E4%B8%8B/</guid>
      <description>useReduer（下） 在实际应用中，我们常常需要很多个变量去管理多个状态。 以下面这个登陆逻辑为例。 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20</description>
    </item>
    
    <item>
      <title>userReducer（上）</title>
      <link>http://localhost:1313/daily/2019-12-16-userreducer%E4%B8%8A/</link>
      <pubDate>Mon, 16 Dec 2019 10:49:22 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-16-userreducer%E4%B8%8A/</guid>
      <description>userReducer（上） 理解useReducer useReducer是一个高级Hook，它不像useEffect、useState等必须</description>
    </item>
    
    <item>
      <title>unstable_batchedUpdates</title>
      <link>http://localhost:1313/daily/2019-12-14-unstable_batchedupdates/</link>
      <pubDate>Sat, 14 Dec 2019 10:32:35 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-14-unstable_batchedupdates/</guid>
      <description>用了Hook一直有一个疑问那就是，怎么能简单的避免异步setState的时候触发多次渲染。 避免多次渲染 首先想到的就是和class一样，定义一</description>
    </item>
    
    <item>
      <title>那些年与charles与接口的过往</title>
      <link>http://localhost:1313/daily/2019-12-11-charles/</link>
      <pubDate>Wed, 11 Dec 2019 22:25:07 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-11-charles/</guid>
      <description>前言 移动端的开发离不开charles 当然正常的web开发可能都离不开charles 就说说那些年用charles改过的接口把 rewrite接口</description>
    </item>
    
    <item>
      <title>那些年移动端的调试</title>
      <link>http://localhost:1313/daily/2019-12-10-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95/</link>
      <pubDate>Tue, 10 Dec 2019 10:56:48 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-10-%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95/</guid>
      <description>前言 移动端的h5开发，就避免不了对ios、安卓这些设备的调试 以前调试兼容性的问题的时候，我会先把代码发到远端然后在测试环境进行查看。 这样的话</description>
    </item>
    
    <item>
      <title>自定义微信小程序导航栏</title>
      <link>http://localhost:1313/daily/2019-12-09-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AF%BC%E8%88%AA%E6%A0%8F/</link>
      <pubDate>Mon, 09 Dec 2019 10:22:51 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-09-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AF%BC%E8%88%AA%E6%A0%8F/</guid>
      <description>今天记录一下之前写过的一个微信小程序的自定义导航栏吧！ 有的时候因为业务、视觉的需要，我们可能不需要顶部默认的导航栏，而是想要类似全屏的效果。</description>
    </item>
    
    <item>
      <title>菜圈的bug</title>
      <link>http://localhost:1313/daily/2019-12-08-%E9%9A%8F%E7%AC%94/</link>
      <pubDate>Sun, 08 Dec 2019 20:26:44 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-08-%E9%9A%8F%E7%AC%94/</guid>
      <description>今天发现了一个bug 我的页面是有三个状态或者更多，我会定义一个renderTree函数，根据pageStatus的不同返回不同的dom 这个时</description>
    </item>
    
    <item>
      <title>裂缝中的阳光</title>
      <link>http://localhost:1313/daily/2019-12-06/</link>
      <pubDate>Fri, 06 Dec 2019 23:29:11 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-06/</guid>
      <description>裂缝中的阳光 有多少创伤卡在咽喉 有多少眼泪滴湿枕头 有多少你觉得不能够 被懂的痛只能沉默 有多少夜晚没有尽头 有多少的寂寞无人诉说 有多少次的梦还没作 已</description>
    </item>
    
    <item>
      <title>useEffect 和 useLayoutEffect</title>
      <link>http://localhost:1313/daily/2019-12-03-useeffect-%E5%92%8C-uselayouteffect/</link>
      <pubDate>Tue, 03 Dec 2019 15:50:01 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-03-useeffect-%E5%92%8C-uselayouteffect/</guid>
      <description>体验useEffect 和 useLayoutEffect 的区别 当我一直很愁页面加一个loading态来防止初始状态和获取数据之后的页面抖动，我以为可以用useLayout</description>
    </item>
    
    <item>
      <title>iif defer</title>
      <link>http://localhost:1313/daily/2019-12-01-iif-defer/</link>
      <pubDate>Sun, 01 Dec 2019 19:09:39 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-12-01-iif-defer/</guid>
      <description>RXJS&amp;ndash;iif defer iif defer iif相当于js三目运算符，返回Observable,接受2-3个参数 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import { iif, of } from &amp;#39;rxjs&amp;#39;; let subscribeToFirst: boolean;</description>
    </item>
    
    <item>
      <title>搭建rxjs环境</title>
      <link>http://localhost:1313/daily/2019-11-30-%E6%90%AD%E5%BB%BArxjs%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sat, 30 Nov 2019 16:25:20 +0800</pubDate>
      
      <guid>http://localhost:1313/daily/2019-11-30-%E6%90%AD%E5%BB%BArxjs%E7%8E%AF%E5%A2%83/</guid>
      <description>前言 昨天，星期五，大部分时间都在看木柴rxjs的代码 对于rxjs不是很了解，但是好像是时候学习一下了。 rx简单介绍 首先从rxjs介绍的话 RxJS 是</description>
    </item>
    
    <item>
      <title>react</title>
      <link>http://localhost:1313/interview/react/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/interview/react/</guid>
      <description>react生命周期</description>
    </item>
    
  </channel>
</rss>
